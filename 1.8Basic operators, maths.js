//Terms: “unary”, “binary”, “operand” 术语：“一元运算符”，“二元运算符”，“运算元”
let x = 1;

x = -x;
alert(x); // -1，一元负号运算符生效

let x = 1, y = 3;
alert(y - x); // 2，二元运算符减号做减运算

//数学
// 支持以下数学运算：
//
// 加法 +,
// 减法 -,
// 乘法 *,
// 除法 /,
// 取余 %,
// 求幂 **.
// 前四个都很简单，而 % 和 ** 则需要说一说。
//取余 %
// 取余运算符是 %，尽管它看起来很像百分数，但实际并无关联。
//
// a % b 的结果是 a 整除 b 的 余数)。
alert(5 % 2); // 1，5 除以 2 的余数
alert(8 % 3); // 2，8 除以 3 的余数
//求幂 **
// 求幂运算 a ** b 是 a 乘以自身 b 次。
alert(2 ** 2); // 4  (2 * 2，自乘 2 次)
alert(2 ** 3); // 8  (2 * 2 * 2，自乘 3 次)
alert(2 ** 4); // 16 (2 * 2 * 2 * 2，自乘 4 次)
alert(4 ** (1 / 2)); // 2（1/2 次方与平方根相同)
alert(8 ** (1 / 3)); // 2（1/3 次方与立方根相同)

//通常，加号 + 用于求和。
//
// 但是如果加号 + 被应用于字符串，它将合并（连接）各个字符串：
let s = "my" + "string";
alert(s); // mystring
//只要任意一个运算元是字符串，那么另一个运算元也将被转化为字符串
alert('1' + 2); // "12"
alert(2 + '1'); // "21"
alert(2 + 2 + '1'); // "41"，不是 "221"
alert(6 - '2'); // 4，将 '2' 转换为数字
alert('6' / '2'); // 3，将两个运算元都转换为数字

//数字转化，一元运算符 +
// 加号 + 有两种形式。一种是上面我们刚刚讨论的二元运算符，还有一种是一元运算符。
//
// 一元运算符加号，或者说，加号 + 应用于单个值，对数字没有任何作用。但是如果运算元不是数字，加号 + 则会将其转化为数字。它的效果和 Number(...) 相同，但是更加简短
// 对数字无效
let x = 1;
alert(+x); // 1

let y = -2;
alert(+y); // -2

// 转化非数字
alert(+true); // 1
alert(+"");   // 0

//
let apples = "2";
let oranges = "3";

alert(apples + oranges); // "23"，二元运算符加号合并字符串

//如果我们想把它们当做数字对待，我们需要转化它们，然后再求和：
let apples = "2";
let oranges = "3";

// 在二元运算符加号起作用之前，所有的值都被转化为了数字
alert(+apples + +oranges); // 5

// 更长的写法
// alert( Number(apples) + Number(oranges) ); // 5

//这是一个摘抄自 Mozilla 的 优先级表（你没有必要把这全记住，但要记住一元运算符优先级高于二元运算符）：
//
// 优先级	名称	符号
// …	…	…
// 17	一元加号	+
// 17	一元负号	-
// 16	求幂	**
// 15	乘号	*
// 15	除号	/
// 13	加号	+
// 13	减号	-
// …	…	…
// 3	赋值符	=
// …	…	…
//我们可以看到，“一元加号运算符”的优先级是 17，高于“二元加号运算符”的优先级 13。这也是为什么表达式 "+apples + +oranges" 中的一元加号先生效，然后才是二元加法

//赋值 = 返回一个值
// = 是一个运算符，而不是一个有着“魔法”作用的语言结构。
//
// 在 JavaScript 中，大多数运算符都会返回一个值。这对于 + 和 - 来说是显而易见的，但对于 = 来说也是如此。
//
// 语句 x = value 将值 value 写入 x 然后返回 x
let a = 1;
let b = 2;

let c = 3 - (a = b + 1);

alert(a); // 3
alert(c); // 0

//链式赋值从右到左进行计算。首先，对最右边的表达式 2 + 2 求值，然后将其赋给左边的变量：c、b 和 a。最后，所有的变量共享一个值
let a, b, c;

a = b = c = 2 + 2;

alert(a); // 4
alert(b); // 4
alert(c); // 4
//出于可读性，最好将这种代码分成几行
c = 2 + 2;
b = c;
a = c;

//原地修改
// 我们经常需要对一个变量做运算，并将新的结果存储在同一个变量中

let n = 2;
n = n + 5;
n = n * 2;
//可以使用运算符 += 和 *= 来缩写这种表示

let n = 2;
n += 5; // 现在 n = 7（等同于 n = n + 5）
n *= 2; // 现在 n = 14（等同于 n = n * 2）

alert(n); // 14
//所有算术和位运算符都有简短的“修改并赋值”运算符：/= 和 -= 等。
//
// 这类运算符的优先级与普通赋值运算符的优先级相同，所以它们在大多数其他运算之后执行
let n = 2;

n *= 3 + 5;

alert(n); // 16 （右边部分先被计算，等同于 n *= 8）

//自增/自减
// 对一个数进行加一、减一是最常见的数学运算符之一。
//
// 所以，对此有一些专门的运算符：
//
// 自增 ++ 将变量与 1 相加：
let counter = 2;
counter++;      // 和 counter = counter + 1 效果一样，但是更简洁
alert(counter); // 3
//自减 -- 将变量与 1 相减：
let counter = 2;
counter--;      // 和 counter = counter - 1 效果一样，但是更简洁
alert(counter); // 1
//自增/自减只能应用于变量

//运算符 ++ 和 -- 可以置于变量前，也可以置于变量后。
//
// 当运算符置于变量后，被称为“后置形式”：counter++。
// 当运算符置于变量前，被称为“前置形式”：++counter。
// 两者都做同一件事：将变量 counter 与 1 相加。
//
// 那么它们有区别吗？有，但只有当我们使用 ++/-- 的返回值时才能看到区别。
//
// 详细点说。我们知道，所有的运算符都有返回值。自增/自减也不例外。前置形式返回一个新的值，但后置返回原来的值（做加法/减法之前的值）
let counter = 1;
let a = ++counter; // (*)

alert(a); // 2

let counter = 1;
let a = counter++; // (*) 将 ++counter 改为 counter++

alert(a); // 1

let counter = 1;
alert(2 * ++counter); // 4

let counter = 1;
alert(2 * counter++); // 2，因为 counter++ 返回的是“旧值”

//我们建议用“一行一个行为”的模式：
let counter = 1;
alert(2 * counter);
counter++;

//位运算符
// 位运算符把运算元当做 32 位整数，并在它们的二进制表现形式上操作。
//
// 这些运算符不是 JavaScript 特有的。大部分的编程语言都支持这些运算符。
//
// 下面是位运算符：
//
// 按位与 ( & )
// 按位或 ( | )
// 按位异或 ( ^ )
// 按位非 ( ~ )
// 左移 ( << )
// 右移 ( >> )
// 无符号右移 ( >>> )
// 这些运算符很少被使用，一般是我们需要在最低级别（位）上操作数字时才使用。我们不会很快用到这些运算符，因为在 Web 开发中很少使用它们，但在某些特殊领域中，例如密码学，它们很有用

//逗号运算符
// 逗号运算符 , 是最少见最不常使用的运算符之一。有时候它会被用来写更简短的代码，因此为了能够理解代码，我们需要了解它。
//
// 逗号运算符能让我们处理多个语句，使用 , 将它们分开。每个语句都运行了，但是只有最后的语句的结果会被返回
let a = (1 + 2, 3 + 4);

alert(a); // 7（3 + 4 的结果）

//请注意逗号运算符的优先级非常低，比 = 还要低，因此上面你的例子中圆括号非常重要。
//
// 如果没有圆括号：a = 1 + 2, 3 + 4 会先执行 +，将数值相加得到 a = 3, 7，然后赋值运算符 = 执行, ‘a = 3’，然后逗号之后的数值 7 不会再执行，它被忽略掉了。相当于 (a = 1 + 2), 3 + 4。

//为什么我们需要这样一个运算符，它只返回最后一个值呢？
//
// 有时候，人们会使用它把几个行为放在一行上来进行复杂的运算
// 一行上有三个运算符
for (a = 1, b = 3, c = a * b; a < 10; a++) {

}


//下面这些表达式的结果是什么？
"" + 1 + 0  //"10"  (1)
"" - 1 + 0  //-1   (2)
true + false  //1
6 / "3"   //2
"2" * "3"  // 6
4 + 5 + "px"  //"9px"
"$" + 4 + 5   //"$45"
"4" - 2      //2
"4px" - 2    //NaN
7 / 0       //Infinity
"  -9  " + 5  //"  -9  5"  (3)
"  -9  " - 5  //-14       (4)
null + 1      //1       (5)
undefined + 1  //NaN    (6)
" \t \n" - 2   //-2     (7) \t是制表符，\r是换行，\n是回车，这类字符串在转换为布尔值时为false