while (condition) {
    // 代码
    // 所谓的“循环体”
}

//例如，以下将循环输出当 i < 3 时的 i 值：
let i = 0;
while (i < 3) { // 依次显示 0、1 和 2
    alert( i );
    i++;
}
//任何表达式或变量都可以是循环条件，而不仅仅是比较。在 while 中的循环条件会被计算，计算结果会被转化为布尔值。
//
// 例如，while (i != 0) 可简写为 while (i)：
let i = 3;
while (i) { // 当 i 变成 0 时，条件为假，循环终止
    alert( i );
    i--;
}
//单行循环体不需要大括号
// 如果循环体只有一条语句，则可以省略大括号 {…}：
let i = 3;
while (i) alert(i--);

//“do…while” 循环
// 使用 do..while 语法可以将条件检查移至循环体 下面：
do {
    // 循环体
} while (condition);


//“for” 循环
// for 循环更加复杂，但它是最常使用的循环形式
for (begin; condition; step) {
    // ……循环体……
}
//下述循环从 i 等于 0 到 3（但不包括 3）运行 alert(i)
for (let i = 0; i < 3; i++) { // 结果为 0、1、2
    alert(i);
}
//跳出循环
// 通常条件为假时，循环会终止。
//
// 但我们随时都可以使用 break 指令强制退出。
//
// 例如，下面这个循环要求用户输入一系列数字，在输入的内容不是数字时“终止”循环
let sum = 0;

while (true) {

    let value = +prompt("Enter a number", '');

    if (!value) break; // (*)

    sum += value;

}
alert( 'Sum: ' + sum );
//继续下一次迭代
// continue 指令是 break 的“轻量版”。它不会停掉整个循环。而是停止当前这一次迭代，并强制启动新一轮循环（如果条件允许的话）。
//
// 如果我们完成了当前的迭代，并且希望继续执行下一次迭代，我们就可以使用它
for (let i = 0; i < 10; i++) {

    //如果为真，跳过循环体的剩余部分。
    if (i % 2 == 0) continue;

    alert(i); // 1，然后 3，5，7，9
}

//继续下一次迭代
// continue 指令是 break 的“轻量版”。它不会停掉整个循环。而是停止当前这一次迭代，并强制启动新一轮循环（如果条件允许的话）。
//
// 如果我们完成了当前的迭代，并且希望继续执行下一次迭代，我们就可以使用它。
//
// 下面这个循环使用 continue 来只输出奇数：
for (let i = 0; i < 10; i++) {

    //如果为真，跳过循环体的剩余部分。
    if (i % 2 == 0) continue;

    alert(i); // 1，然后 3，5，7，9
}
//对于偶数的 i 值，continue 指令会停止本次循环的继续执行，将控制权传递给下一次 for 循环的迭代（使用下一个数字）。因此 alert 仅被奇数值调用。

//禁止 break/continue 在 ‘?’ 的右边
// 请注意非表达式的语法结构不能与三元运算符 ? 一起使用。特别是 break/continue 这样的指令是不允许这样使用的

//我们需要提供一种方法，以在用户取消输入时来停止这个过程。
//
// 在 input 之后的普通 break 只会打破内部循环。这还不够 —— 标签可以实现这一功能！
//
// 标签 是在循环之前带有冒号的标识符
// labelName: for () {
//
// }
//break <labelName> 语句跳出循环至标签处

outer: for (let i = 0; i < 3; i++) {

    for (let j = 0; j < 3; j++) {

        let input = prompt(`Value at coords (${i},${j})`, '');

        // 如果是空字符串或被取消，则中断并跳出这两个循环。
        if (!input) break outer; // (*)

        // 用得到的值做些事……
    }
}
alert('Done!');
//上述代码中，break outer 向上寻找名为 outer 的标签并跳出当前循环。
//
// 因此，控制权直接从 (*) 转至 alert('Done!')。
//
// 我们还可以将标签移至单独一行：



//总结
// 我们学习了三种循环：
//
// while —— 每次迭代之前都要检查条件。
// do..while —— 每次迭代后都要检查条件。
// for (;;) —— 每次迭代之前都要检查条件，可以使用其他设置。
// 通常使用 while(true) 来构造“无限”循环。这样的循环和其他循环一样，都可以通过 break 指令来终止。
//
// 如果我们不想在当前迭代中做任何事，并且想要转移至下一次迭代，那么可以使用 continue 指令。
//
// break/continue 支持循环前的标签。标签是 break/continue 跳出嵌套循环以转到外部的唯一方法。